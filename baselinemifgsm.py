# -*- coding: utf-8 -*-
"""BaseLineMIFGSM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14MP7LtacgfJXqMzygzU6Ed8iUNcwPiDW
"""

from __future__ import print_function
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets
import numpy as np
import matplotlib.pyplot as plt
import torchvision.models as models
from torchvision import datasets, transforms as T

epsilons = [0, .05, .1, .15, .2, .25]
#epsilons = [0, .01, .05, .1]
use_cuda=True

normalize = T.Normalize(mean=[0.485, 0.456, 0.406],
                                 std=[0.229, 0.224, 0.225])


transform = T.Compose([T.Resize(256), T.CenterCrop(224), T.ToTensor(), normalize])

dataset = datasets.ImageFolder("/content/drive/MyDrive/CS726/inv2-tops/", transform=transform)
test_loader = torch.utils.data.DataLoader(dataset,batch_size=1, shuffle=True)

# functions to show an image
def imshow(img):
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    plt.imshow(np.transpose(npimg, (1, 2, 0)))
    plt.show()


# get some random training images
dataiter = iter(test_loader)
images, labels = dataiter.next()

#print image
print(images[0])
imshow(images[0])

# Define what device we are using
print("CUDA Available: ",torch.cuda.is_available())
device = torch.device("cuda" if (use_cuda and torch.cuda.is_available()) else "cpu")

def test( model, device, test_loader, epsilon ):

    # Accuracy counter
    correct = 0
    adv_examples = []
    counter = 0
    # Loop over all examples in test set
    for data, target in test_loader:
        #print(data)
        # Check for 10000 images
        counter += 1
        if counter == 10000:
          break
        
        # Set the parameters
        steps = 3
        alpha = epsilon/steps
        mu = 1

        # Send the data and label to the device
        data, target = data.to(device), target.to(device)

        # Set requires_grad attribute of tensor. Important for Attack
        data.requires_grad = True

        # Forward pass the data through the model
        output = model(data)
        init_pred = output.max(1, keepdim=True)[1] # get the index of the max log-probability

        # If the initial prediction is wrong, dont bother attacking, just move on
        if init_pred.item() != target.item():
            steps = 0
        
        g = torch.zeros_like(data).to(device)
        
        for step in range(steps):
          # Send the data and label to the device
          data, target = data.to(device), target.to(device)

          # Set requires_grad attribute of tensor. Important for Attack
          data.requires_grad = True
          
          # Forward pass the data through the model
          output = model(data)
          
          # Calculate the loss
          loss = F.nll_loss(output, target)

          # Zero all existing gradients
          model.zero_grad()

          # Calculate gradients of model in backward pass
          loss.backward()

          # Collect datagrad
          data_grad = data.grad.data
          data.requires_grad = False

          # Update gradients
          grad_norm = torch.norm(nn.Flatten()(data_grad), p=1, dim=1)
          if step == 0:
            g = data_grad/grad_norm
          else:
            g = mu*g + data_grad/grad_norm

          # Create Adversarial Image
          sign_data_grad = g.sign()
          data = data + alpha*sign_data_grad
        
          # Re-classify the perturbed image
          output = model(data)

        # Check for success
        final_pred = output.max(1, keepdim=True)[1] # get the index of the max log-probability
        if final_pred.item() == target.item():
            correct += 1
            # Special case for saving 0 epsilon examples
            if (epsilon == 0) and (len(adv_examples) < 5):
                adv_ex = data.squeeze().detach().cpu().numpy()
                adv_examples.append( (init_pred.item(), final_pred.item(), adv_ex) )
        else:
            # Save some adv examples for visualization later
            if len(adv_examples) < 5:
                adv_ex = data.squeeze().detach().cpu().numpy()
                adv_examples.append( (init_pred.item(), final_pred.item(), adv_ex) )

    # Calculate final accuracy for this epsilon
    #final_acc = correct/float(len(test_loader))
    final_acc = correct/float(10000)
    #print("Epsilon: {}\tTest Accuracy = {} / {} = {}".format(epsilon, correct, len(test_loader), final_acc))
    print("Epsilon: {}\tTest Accuracy = {} / {} = {}".format(epsilon, correct, 10000, final_acc))

    # Return the accuracy and an adversarial example
    return final_acc, adv_examples

accuracies = []
examples = []

# Load the network
model = models.alexnet(pretrained=True)

# Transfer the network
model = model.to(device)

# Set the model in evaluation mode. In this case this is for the Dropout layers
model.eval()

# Run test for each epsilon
for eps in epsilons:
    acc, ex = test(model, device, test_loader, eps)
    accuracies.append(acc)
    examples.append(ex)

# Plot several examples of adversarial samples at each epsilon
cnt = 0
plt.figure(figsize=(8,10))
for i in range(len(epsilons)):
    for j in range(len(examples[i])):
        cnt += 1
        plt.subplot(len(epsilons),len(examples[0]),cnt)
        plt.xticks([], [])
        plt.yticks([], [])
        if j == 0:
            plt.ylabel("Eps: {}".format(epsilons[i]), fontsize=14)
        orig,adv,ex = examples[i][j]
        plt.title("{} -> {}".format(orig, adv))
        plt.imshow(ex.transpose())
plt.tight_layout()
plt.show()

accuracies = []
examples = []

# Load the network
model = models.resnet18(pretrained=True)

# Transfer the network
model = model.to(device)

# Set the model in evaluation mode. In this case this is for the Dropout layers
model.eval()

# Run test for each epsilon
for eps in epsilons:
    acc, ex = test(model, device, test_loader, eps)
    accuracies.append(acc)
    examples.append(ex)

# Plot several examples of adversarial samples at each epsilon
cnt = 0
plt.figure(figsize=(8,10))
for i in range(len(epsilons)):
    for j in range(len(examples[i])):
        cnt += 1
        plt.subplot(len(epsilons),len(examples[0]),cnt)
        plt.xticks([], [])
        plt.yticks([], [])
        if j == 0:
            plt.ylabel("Eps: {}".format(epsilons[i]), fontsize=14)
        orig,adv,ex = examples[i][j]
        plt.title("{} -> {}".format(orig, adv))
        plt.imshow(ex.transpose())
plt.tight_layout()
plt.show()

accuracies = []
examples = []

# Load the network
model = models.mobilenet_v3_large(pretrained=True)

# Transfer the network
model = model.to(device)

# Set the model in evaluation mode. In this case this is for the Dropout layers
model.eval()

# Run test for each epsilon
for eps in epsilons:
    acc, ex = test(model, device, test_loader, eps)
    accuracies.append(acc)
    examples.append(ex)

# Plot several examples of adversarial samples at each epsilon
cnt = 0
plt.figure(figsize=(8,10))
for i in range(len(epsilons)):
    for j in range(len(examples[i])):
        cnt += 1
        plt.subplot(len(epsilons),len(examples[0]),cnt)
        plt.xticks([], [])
        plt.yticks([], [])
        if j == 0:
            plt.ylabel("Eps: {}".format(epsilons[i]), fontsize=14)
        orig,adv,ex = examples[i][j]
        plt.title("{} -> {}".format(orig, adv))
        plt.imshow(ex.transpose())
plt.tight_layout()
plt.show()